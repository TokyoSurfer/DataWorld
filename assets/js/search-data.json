{
  
    
        "post0": {
            "title": "How to turn a Raspberry Pi into a Plex home media server",
            "content": "Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Ethernet cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Install Raspberry Pi operating system . Flash a microSD card with a Raspberry Pi operating system using the Raspberry Pi Imager. I used the default raspbian OS as shown below. Be careful about which microSD card you use as this flashing process will wipe the drive. It may take a while for it to fully install the OS. Once this is done, eject the microSD card and insert into the Raspberry Pi. . For more in-depth notes on installing the OS, follow this guide. . from IPython import display display.Image(&quot;./Images/RaspberryPiImager.png&quot;) . Step 3: Preparing Pi for Plex . Before installing the Plex Media Server software to the Raspberry Pi, we need first to ensure our operating system is entirely up to date by running the following two commands in the terminal. . sudo apt-get update sudo apt-get upgrade . Step 4: enable HTTPS transfer during downloads . To install the Plex packages to the Raspberry Pi, we will need to add the official Plex package repository. The apt-transport-https package must be installed so that Raspbian’s package manager can also access these HTTPS sources. This package allows the “apt” package manager to retrieve packages over the “https” protocol that the Plex repository uses. . Install the package by running the command below. . sudo apt-get install apt-transport-https . display.Image(&quot;./Images/RaspberryPi_HTTPS.png&quot;) . Step 5: Add Plex repositories to the &quot;apt&quot; package managers key list . This key is used to ensure the files that you are downloading are in fact from that repository and signed by that key. . Run the following command to download and add the key to the package manager. . curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add - . display.Image(&quot;./Images/RaspberryPi_APT.png&quot;) . Step 6: Add official Plex repository . With the Plex GPG key now added, we can finally add the official plex repository to the sources list by running the following command. . echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list . We&#39;ll need to run the update command once more to refresh our libraries as we&#39;ve added another repository to our sources. . sudo apt-get update . display.Image(&quot;./Images/RaspberryPi_GPGKey.png&quot;) . Step 7: Installing Plex to your Raspberry Pi . Now that we have set up our Raspberry Pi so that it can read from Plex’s official package repositories we can go ahead and finally install the Plex Media server package to the Pi. . To install the “plexmediaserver” package, run the command below. . sudo apt install plexmediaserver . display.Image(&quot;./Images/RaspberryPi_Plex.png&quot;) . Step 8: Setting a static IP addess for your Plex server . Now that we have installed Plex to our Raspberry Pi we should make sure that we are using a static IP address. . There are two reasons to use a static IP. One is that the IP will be easier to remember. Second is that it will make sure your Plex server can always be found at the same address. . To get your current IP address, enter the following command. . hostname -I . display.Image(&quot;./Images/RaspberryPi_IP.png&quot;) . Now open up the cmdline.txt file. . sudo nano /boot/cmdline.txt . At the bottom of this file, add the following line: (Replacing “YOUR IP” with the IP you got from using hostname -I) . ip=YOUR IP . Exit by pressing CTRL + X and then Y to save . Now simply restart the Pi by running the following command: . sudo reboot .",
            "url": "https://tokyosurfer.github.io/DataWorld/2021/07/21/Turning-Raspberry-Pi-into-a-Plex-media-server.html",
            "relUrl": "/2021/07/21/Turning-Raspberry-Pi-into-a-Plex-media-server.html",
            "date": " • Jul 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "How to turn a Raspberry Pi into a NAS for security footage",
            "content": "Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Install Raspberry Pi operating system . Flash a microSD card with a Raspberry Pi operating system using the Raspberry Pi Imager. I used the default raspbian OS as shown below. Be careful about which microSD card you use as this flashing process will wipe the drive. It may take a while for it to fully install the OS. Once this is done, eject the microSD card and insert into the Raspberry Pi. . For more in-depth notes on installing the OS, follow this guide. . from IPython import display display.Image(&quot;./Images/RaspberryPiImager.png&quot;) . display.Image(&quot;./Images/RaspberryPiImager2.png&quot;) . Step 3: Access and update your system . Connect the keyboard, mouse, computer monitor (via microHDMI - HDMI cable) and power supply to the Raspberry Pi. The set-up process should occur automatically, however once you get to the home screen you&#39;ll be asked to confirm several things (language, WiFi etc). Following this, you&#39;ll see the default home screen as shown below. . display.Image(&quot;./Images/RaspberryHomeScreen.png&quot;) . Update your system . Open command line and run the following two lines to update the package list and all packages. . sudo apt-get update . sudo apt-get upgrade . display.Image(&quot;./Images/RaspberryPi_Update.png&quot;) . Step 4: Install Samba on your Raspberry Pi . After your Raspbian OS is up to date, we&#39;ll need to install the Samba software on the Raspberry Pi. Use the following command: . sudo apt-get install samba samba-common-bin . display.Image(&quot;./Images/RaspberryPi_Samba.png&quot;) . Step 5: Create a Shared Folder . Now we&#39;ll need to create a place where you can store and share all our data. This folder can be located anywhere, even on a mounted external hard drive. For this tutorial we&#39;ll be creating a public and private folder accessible on the NAS. Use the following command: . mkdir /home/pi/shared . display.Image(&quot;./Images/RaspberryPi_SharedFolder.png&quot;) . Step 6: Sharing folder using Samba . Now we&#39;ll be sharing the above folder we created using Samba. TO do this we&#39;ll need to modify the Samba configuration file. Use the following command to access the file: . sudo nano /etc/samba/smb.conf . The screen below should pop-up once this command has been entered. Within this file add the following to the bottom: . [Raspi-NAS] path = /home/pi/shared writeable=Yes create mask=0777 directory mask=0777 public=no . [Sharedfolder]: This defines the address and other configurations of the shared folder. For example, the shared folder will be created at the following address: raspberrypi Sharedfolder. You can rename it to whatever you like as well. . path: This option contains the address of the directory that is going to be shared. If you wish to store the shared folder on an external drive, just change to path option here to point it towards your external drive. . writeable: If this option is set to yes, the folder will be writable. . create mask &amp; directory mask: This option defines the permissions for the folder and the files it contains. By setting it to 0777, it will allow users to read, write and execute. . public: This option is used to give permission to either give any user access to the folder or restricted access. With the option set to “no”, the Raspberry Pi needs a valid user to grant access to shared folders. . display.Image(&quot;./Images/RaspberryPi_Samba2.png&quot;) . Save the changes . Now we&#39;ve added the changes, we can save them by pressing CTRL + X then Y and hit ENTER . Step 7: Make a User for Samba on the Raspberry Pi . Next, we will make a user for our Samba server on the Raspberry Pi in order for us to make a connection to the shared network drive. We will run a command to create a Samba user called “Pi”: . sudo smbpasswd -a pi . After running this command, you will be prompted to set a password that is up to you. With this user “Pi” you can access and manage the Samba folder from Windows, macOS, or other Raspberry Pi devices If you wish to create additional users, key in the following commands: . sudo adduser username sudo smbpasswd -a username . Replace “username” with your choice of username. . Step 8: Connect to Samba server on Windows . Go to Map Network Drive . To access files and folders on Windows system, we have to put the address of the shared media. You can do this by going My Computer and click Map Network Drive as shown below: . display.Image(&quot;./Images/SambaServer_Windows.png&quot;) . Connect to the Network Folder . After clicking on Map network drive, this dialog will be shown. You will have to fill in the address which you previously defined in step 6. For this tutorial we&#39;ve chosen Raspi-NAS If the connection fails, switch out “raspberrypi” with your Raspberry Pi local IP address by entering this command in terminal (hostname -I) Once you are done, click Finish to finalize the connection. . display.Image(&quot;./Images/SambaServer_Windows2.png&quot;) .",
            "url": "https://tokyosurfer.github.io/DataWorld/2021/07/21/Turning-Raspberry-Pi-into-a-NAS.html",
            "relUrl": "/2021/07/21/Turning-Raspberry-Pi-into-a-NAS.html",
            "date": " • Jul 21, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "VNC (Virtual Network Computing)",
            "content": "Step 1: Installing VNC . VNC is actually already installed on the full Raspberry Pi OS image, and can be installed via Recommended Software from the Preferences menu on other versions. . Otherwise, using command line you can run the following commands: . sudo apt update sudo apt install realvnc-vnc-server realvnc-vnc-viewer . from IPython import display display.Image(&quot;./Images/RaspberryPi_VNCInstall.png&quot;) . Step 2: Enabling the VNC server . You can do this graphically or at the command line. . Enabling VNC Server graphically On your Raspberry Pi, boot into the graphical desktop. . Select Menu &gt; Preferences &gt; Raspberry Pi Configuration &gt; Interfaces. . Ensure VNC is Enabled. . Enabling VNC Server at the command line You can enable VNC Server at the command line using raspi-config: . sudo raspi-config . Now, enable VNC Server by doing the following: . Navigate to Interfacing Options. . Scroll down and select VNC &gt; Yes. . Step 3: Connecting Raspberry Pi with VNC Viewer . Establishing a direct connection Direct connections are quick and simple providing you&#39;re joined to the same private local network as your Raspberry Pi. For example, this might be a wired or wireless network at home, at school, or in the office. . On your Raspberry Pi (using a terminal window or via SSH) use these instructions or run ifconfig to discover your private IP address. . On the device you&#39;ll use to take control, download VNC Viewer. For best results, use the compatible app from RealVNC. . Enter your Raspberry Pi&#39;s private IP address into VNC Viewer: . from IPython import display display.Image(&quot;./Images/RaspberryPi_VNC.png&quot;) .",
            "url": "https://tokyosurfer.github.io/DataWorld/2021/07/20/Setting-up-VNC-on-Raspberry-Pi-for-remote-access.html",
            "relUrl": "/2021/07/20/Setting-up-VNC-on-Raspberry-Pi-for-remote-access.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "How to mount an external hard drive to Raspberry Pi",
            "content": "Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Identify disks for mounting . We first need to find out the filesystem name for the drive we want to mount to our Raspberry Pi . We&#39;ll be using the &quot;df&quot; command as below . df -h . The following output is expected . from IPython import display display.Image(&quot;./Images/RaspberryPi_Mount1.png&quot;) . This results in a list of all connected storage devices, the name of their filesystem and where they are currently mounted on. We&#39;ll use this to identify the drive we want to mount. . In this tutorial, we&#39;ll be mounting Raspi_NAS drive to our Raspberry Pi. Note: Most external drives will be referenced under the /dev/sd** filesystem name. . We see that this entry matches what we&#39;re after: . /dev/sda1 9.1T 1.6T 7.6T 18% /mnt/Raspi_NAS . Step 3: Retrive Disk UUID and Type . We&#39;ll need to take the filesystem name we retrieved in the previous section to find both the UUID (Universal Unique Identifier) and the type of drive. . Run the following command to retrieve this information specific to the drive entry we identified earlier: . sudo blkid /dev/sda1 . display.Image(&quot;./Images/RaspberryPi_Mount2.png&quot;) . From this we can see that both UUID and type are returned. Please make a note on both the UUID and type. . Step 4: Additional drivers . Depending on the type of your filesystem, you may need to install additional drivers. . If you are using a drive that has a type of ntfs or exFAT, you will need to follow the appropriate steps below. Otherwise, you can continue to the next section. . NFTS . sudo apt install ntfs-3g . exFAT . sudo apt install exfat-fuse sudo apt install exfat-utils . Step 5: Mount the drive to Raspberry Pi . Now that we&#39;ve got the UUID, type and installed the additional drivers (if needed), we can now mount the drive. . Make new directory to mount our drive to . We can do this by running the following command. You can name the folder we are mounting anything, but for this tutorial, we will be using the name Raspi_NAS. . sudo mkdir -p /mnt/Raspi_NAS . Giving permissions to the new folder . We need appropriate permissions set-up to access the drive mounted in this new folder . sudo chown -R pi:pi /mnt/Raspi_NAS . Modify the fstab file . This file controls how drives are mounted to your Raspberry Pi . sudo nano /etc/fstab . This should open up a file, where you&#39;ll need to add the following to the bottom, replacing [UUID] and [TYPE] with their required values. . UUID=[UUID] /mnt/usb1 [TYPE] defaults,auto,users,rw,nofail,noatime 0 0 . Once done, save the file by pressing CTRL + X, followed by Y and then the ENTER key. . display.Image(&quot;./Images/RaspberryPi_Mount3.png&quot;) . Step 5: Checking the mounted drive . We&#39;ll need to unmount and mount the drive to ensure the changes made to the fstab file have taken. (Replace /dev/sda1 with the filesystem name you found earlier). . Unmount the drive . sudo umount /dev/sda1 . Mount the drive again . sudo mount -a . Making sure the drives are restored after Pi has been restarted . sudo reboot . The drives should automatically be mounted after the Raspberry Pi has finished rebooting. .",
            "url": "https://tokyosurfer.github.io/DataWorld/2021/07/20/Mounting-a-drive-in-Raspberry-Pi.html",
            "relUrl": "/2021/07/20/Mounting-a-drive-in-Raspberry-Pi.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tokyosurfer.github.io/DataWorld/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tokyosurfer.github.io/DataWorld/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tokyosurfer.github.io/DataWorld/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}