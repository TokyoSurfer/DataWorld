{
  
    
        "post0": {
            "title": "Writing functions in Python",
            "content": "Introduction to functions . A function is a group of code that only runs when it is called. They are a common feature of all programming languages as they allow the developer to write blocks of code that perform specific tasks. Furthermore, they reduce repitition in code as the same block of code within a function may be executed over and over. . In Python, a function is defined using the def keyword. Arguments represent information which can be passed to the function. Any number of arguments may be added to a function, however, when that function is called, the user must define the arguments if they don&#39;t contain default values. . Simple functions . No argument . def say_hello(): print(&quot;Hello!&quot;) say_hello() . Hello! . One argument . def say_hello(name): print(f&quot;Hello {name}!&quot;) say_hello(&quot;Kai&quot;) . Hello Kai! . Default argument . def say_hello(name = &quot;Kai&quot;): print(f&quot;Hello {name}!&quot;) say_hello() . Hello Kai! . Multiple arguments . def say_hello(name, age): print(f&quot;Hello my name is {name} and I&#39;m {age} years old!&quot;) say_hello(&quot;Kai&quot;, 27) . Hello my name is Kai and I&#39;m 27 years old! . Return values . Instead of printing an output, we can return values using the return statement at the end of a function . def raise_to_power(value1, value2): &quot;&quot;&quot;Raise value1 to the power of value2.&quot;&quot;&quot; new_value = value1 ** value2 return new_value raise_to_power(2,4) . 16 . Scope . A variable is only available from inside the region it is created, this is referred to as scope. There are several differnt types which can be abbreviated to the LEGB rule, which stands for Local, Enclosing, Global and Built-in. . Local (or function) scope is the code block or body of any Python function or lambda expression. This Python scope contains the names that you define inside the function. These names will only be visible from the code of the function. It’s created at function call, not at function definition, so you’ll have as many different local scopes as function calls. This is true even if you call the same function multiple times, or recursively. Each call will result in a new local scope being created. . | Enclosing (or nonlocal) scope is a special scope that only exists for nested functions. If the local scope is an inner or nested function, then the enclosing scope is the scope of the outer or enclosing function. This scope contains the names that you define in the enclosing function. The names in the enclosing scope are visible from the code of the inner and enclosing functions. . | Global (or module) scope is the top-most scope in a Python program, script, or module. This Python scope contains all of the names that you define at the top level of a program or a module. Names in this Python scope are visible from everywhere in your code. . | Built-in scope is a special Python scope that’s created or loaded whenever you run a script or open an interactive session. This scope contains names such as keywords, functions, exceptions, and other attributes that are built into Python. Names in this Python scope are also available from everywhere in your code. It’s automatically loaded by Python when you run a program or script. . | . Local scope . A variable created inside a function belongs to the local scope of that function, and can only be used inside that function. . def print_number(value = 10): x = 300 new_value = x * value print(new_value) print_number(1) print(x) . 300 200 . Global scope . A variable created in the main body of a Python script belongs to the global scope. Global variables are available within any scope, global and local. . x = 300 def print_number(value = 10): new_value = x * value print(new_value) print_number(1) print(x) . 300 300 . Naming variables . If you operate with the same variable name both within and outside a function, Python will treat them as separate variables. One is in the global scope, and the other in the local scope. . x = 300 def print_number(value = 10): x = 200 new_value = x * value print(new_value) print_number(1) print(x) . 200 300 . Global keyword . If you need to create a global variable, but are within the local scope of a function, you may use the global keyword. . def print_number(value = 10): global x x = 200 new_value = x * value print(new_value) print_number(1) print(x) . 200 200 . Nonlocal keyword . Similar to the global keyword, the nonlocal keyword can be used to access nonlocal variables from enclosing functions and updated. The nonlocal statement consists of the nonlocal keyword followed by one or more names separated by commas. These names will refer to the same names in the enclosing Python scope. . def nonlocal_func(): &quot;&quot;&quot;Prints the value of var&quot;&quot;&quot; # Define var var = 100 # Define inner_func def inner_func(): &quot;&quot;&quot;Print s var incremented by 100&quot;&quot;&quot; nonlocal var var += 100 inner_func() print(var) # Call nonlocal_func nonlocal_func() . 200 . The nonlocal keyword tells Python that you&#39;ll be modifying var inside the inner_func function. This change is reflected in the printed value, which was originally 100, but is now 200. . Nested functions . Sometimes it&#39;s necessary to nest functions within functions. This is helpful when youw want to avoid writing out the same computations within a function repeatedly. There&#39;s nothing new with nested functions, you simply embed one inside the other. . def shouting(word1, word2, word3): &quot;&quot;&quot;Returns a tuple of strings concatenated with &#39;!!!&#39;.&quot;&quot;&quot; # Define inner def inner(word): &quot;&quot;&quot;Returns a string concatenated with &#39;!!!&#39;.&quot;&quot;&quot; return word + &#39;!!!&#39; # Return a tuple of strings return (inner(word1), inner(word2), inner(word3)) # Call three_shouts() and print print(shouting(&#39;One&#39;, &#39;Two&#39;, &#39;Three&#39;)) . (&#39;One!!!&#39;, &#39;Two!!!&#39;, &#39;Three!!!&#39;) . Another reason for nesting function is the idea of closure. This means that the nested or inner function remembers the state of its enclosing scope when called. Thus, anything defined locally in the enclosing scope is available to the inner function even when the outer function has finished execution. . def echo(n): &quot;&quot;&quot;Returns the inner_echo function.&quot;&quot;&quot; # Define inner_echo def inner_echo(word1): &quot;&quot;&quot;Concatenate n copies of word1.&quot;&quot;&quot; echo_word = word1 * n return echo_word # Return inner_echo return(inner_echo) # Call echo: twice twice = echo(2) # Call echo: thrice thrice = echo(3) # Call twice() and thrice() then print print(twice(&#39;hello&#39;), thrice(&#39;hello&#39;)) . hellohello hellohellohello . Functions with variable-length arguments . Flexible arguments allow you to pass a variable number of arguments to a function. . There are two special symbols: . *args (Non-Keyworded arguments) | **kwargs (Keyworded arguments) | . *args . This is used to pass non-key worded, variable-length argument lists to a function. What *args allows you to do is take in more arguments than the number of formal arguments that you previously defined. With *args, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments). . def function1(arg1, *argv): print (&quot;First argument :&quot;, arg1) for arg in argv: print(&quot;Next argument through *argv :&quot;, arg) # Call function1 function1(&#39;Hello&#39;, &#39;My&#39;, &#39;Name&#39;, &#39;Is&#39;, &#39;Kai&#39;) . First argument : Hello Next argument through *argv : My Next argument through *argv : Name Next argument through *argv : Is Next argument through *argv : Kai . **kwargs . This is used to pass key worded, variable-length argument lists to a function. One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn’t seem to be any order in which they were printed out. . def function2(**kwargs): for key, value in kwargs.items(): print (&quot;%s == %s&quot; %(key, value)) # Call function2 function2(first =&#39;Hello&#39;, second =&#39;My&#39;, third =&#39;Name&#39;, fourth = &#39;Is&#39;, fifth = &#39;Kai&#39;) . first == Hello second == My third == Name fourth == Is fifth == Kai . Lambda functions . These are little, anonymous functions, subject to a more restrictive but concise syntax than regular Python functions. . echo_word = (lambda word1, echo: word1 * echo) # Call echo_word: result result = echo_word(&#39;hey&#39;, 5) # Print result print(result) . heyheyheyheyhey . import folium phone_map = folium.Map() # Top three smart phone companies by market share in 2016 companies = [ {&#39;loc&#39;: [37.4970, 127.0266], &#39;label&#39;: &#39;Samsung: 20.5%&#39;}, {&#39;loc&#39;: [37.3318, -122.0311], &#39;label&#39;: &#39;Apple: 14.4%&#39;}, {&#39;loc&#39;: [22.5431, 114.0579], &#39;label&#39;: &#39;Huawei: 8.9%&#39;}] # Adding markers to the map for company in companies: marker = folium.Marker(location=company[&#39;loc&#39;], popup=company[&#39;label&#39;]) marker.add_to(phone_map) # The last object in the cell always gets shown in the notebook phone_map . Make this Notebook Trusted to load map: File -&gt; Trust Notebook&lt;iframe src=&quot;about:blank&quot; style=&quot;position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;&quot; data-html=%3C%21DOCTYPE%20html%3E%0A%3Chead%3E%20%20%20%20%0A%20%20%20%20%3Cmeta%20http-equiv%3D%22content-type%22%20content%3D%22text/html%3B%20charset%3DUTF-8%22%20/%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%3Cscript%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20L_NO_TOUCH%20%3D%20false%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20L_DISABLE_3D%20%3D%20false%3B%0A%20%20%20%20%20%20%20%20%3C/script%3E%0A%20%20%20%20%0A%20%20%20%20%3Cstyle%3Ehtml%2C%20body%20%7Bwidth%3A%20100%25%3Bheight%3A%20100%25%3Bmargin%3A%200%3Bpadding%3A%200%3B%7D%3C/style%3E%0A%20%20%20%20%3Cstyle%3E%23map%20%7Bposition%3Aabsolute%3Btop%3A0%3Bbottom%3A0%3Bright%3A0%3Bleft%3A0%3B%7D%3C/style%3E%0A%20%20%20%20%3Cscript%20src%3D%22https%3A//cdn.jsdelivr.net/npm/leaflet%401.6.0/dist/leaflet.js%22%3E%3C/script%3E%0A%20%20%20%20%3Cscript%20src%3D%22https%3A//code.jquery.com/jquery-1.12.4.min.js%22%3E%3C/script%3E%0A%20%20%20%20%3Cscript%20src%3D%22https%3A//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js%22%3E%3C/script%3E%0A%20%20%20%20%3Cscript%20src%3D%22https%3A//cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js%22%3E%3C/script%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//cdn.jsdelivr.net/npm/leaflet%401.6.0/dist/leaflet.css%22/%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css%22/%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css%22/%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css%22/%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css%22/%3E%0A%20%20%20%20%3Clink%20rel%3D%22stylesheet%22%20href%3D%22https%3A//cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css%22/%3E%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cmeta%20name%3D%22viewport%22%20content%3D%22width%3Ddevice-width%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20initial-scale%3D1.0%2C%20maximum-scale%3D1.0%2C%20user-scalable%3Dno%22%20/%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cstyle%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23map_5a9c69efef38418194e1bf069d47f317%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20position%3A%20relative%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20width%3A%20100.0%25%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20height%3A%20100.0%25%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20left%3A%200.0%25%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20top%3A%200.0%25%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/style%3E%0A%20%20%20%20%20%20%20%20%0A%3C/head%3E%0A%3Cbody%3E%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22folium-map%22%20id%3D%22map_5a9c69efef38418194e1bf069d47f317%22%20%3E%3C/div%3E%0A%20%20%20%20%20%20%20%20%0A%3C/body%3E%0A%3Cscript%3E%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20map_5a9c69efef38418194e1bf069d47f317%20%3D%20L.map%28%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22map_5a9c69efef38418194e1bf069d47f317%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20center%3A%20%5B0%2C%200%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20crs%3A%20L.CRS.EPSG3857%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20zoom%3A%201%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20zoomControl%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20preferCanvas%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%29%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20tile_layer_78b1aedbd60e49bea3bf3bf61dcf4be6%20%3D%20L.tileLayer%28%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22https%3A//%7Bs%7D.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22attribution%22%3A%20%22Data%20by%20%5Cu0026copy%3B%20%5Cu003ca%20href%3D%5C%22http%3A//openstreetmap.org%5C%22%5Cu003eOpenStreetMap%5Cu003c/a%5Cu003e%2C%20under%20%5Cu003ca%20href%3D%5C%22http%3A//www.openstreetmap.org/copyright%5C%22%5Cu003eODbL%5Cu003c/a%5Cu003e.%22%2C%20%22detectRetina%22%3A%20false%2C%20%22maxNativeZoom%22%3A%2018%2C%20%22maxZoom%22%3A%2018%2C%20%22minZoom%22%3A%200%2C%20%22noWrap%22%3A%20false%2C%20%22opacity%22%3A%201%2C%20%22subdomains%22%3A%20%22abc%22%2C%20%22tms%22%3A%20false%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%29.addTo%28map_5a9c69efef38418194e1bf069d47f317%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20marker_a7625b39f076416ba33f95c8f99f4269%20%3D%20L.marker%28%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B37.497%2C%20127.0266%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%29.addTo%28map_5a9c69efef38418194e1bf069d47f317%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20var%20popup_8dad34977f394a2f9907b3577a66b458%20%3D%20L.popup%28%7B%22maxWidth%22%3A%20%22100%25%22%7D%29%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20html_857c5ff7088240038e77d64c27d2792e%20%3D%20%24%28%60%3Cdiv%20id%3D%22html_857c5ff7088240038e77d64c27d2792e%22%20style%3D%22width%3A%20100.0%25%3B%20height%3A%20100.0%25%3B%22%3ESamsung%3A%2020.5%25%3C/div%3E%60%29%5B0%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20popup_8dad34977f394a2f9907b3577a66b458.setContent%28html_857c5ff7088240038e77d64c27d2792e%29%3B%0A%20%20%20%20%20%20%20%20%0A%0A%20%20%20%20%20%20%20%20marker_a7625b39f076416ba33f95c8f99f4269.bindPopup%28popup_8dad34977f394a2f9907b3577a66b458%29%0A%20%20%20%20%20%20%20%20%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20marker_321de5a5b5564ce0aa474b835a06a192%20%3D%20L.marker%28%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B37.3318%2C%20-122.0311%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%29.addTo%28map_5a9c69efef38418194e1bf069d47f317%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20var%20popup_31fb50dbc018482bb8e7d2e044fa5ad4%20%3D%20L.popup%28%7B%22maxWidth%22%3A%20%22100%25%22%7D%29%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20html_dc6d1a4209e34184a1d07893bf78c088%20%3D%20%24%28%60%3Cdiv%20id%3D%22html_dc6d1a4209e34184a1d07893bf78c088%22%20style%3D%22width%3A%20100.0%25%3B%20height%3A%20100.0%25%3B%22%3EApple%3A%2014.4%25%3C/div%3E%60%29%5B0%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20popup_31fb50dbc018482bb8e7d2e044fa5ad4.setContent%28html_dc6d1a4209e34184a1d07893bf78c088%29%3B%0A%20%20%20%20%20%20%20%20%0A%0A%20%20%20%20%20%20%20%20marker_321de5a5b5564ce0aa474b835a06a192.bindPopup%28popup_31fb50dbc018482bb8e7d2e044fa5ad4%29%0A%20%20%20%20%20%20%20%20%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20marker_cd46341c81794a1cbc88e145e18f05d6%20%3D%20L.marker%28%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B22.5431%2C%20114.0579%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%29.addTo%28map_5a9c69efef38418194e1bf069d47f317%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%20%20%20%20var%20popup_7832d5f7b275484b8b9bc3b77bb6e2cf%20%3D%20L.popup%28%7B%22maxWidth%22%3A%20%22100%25%22%7D%29%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20html_9069202c767a4bc186689e231b48f8f9%20%3D%20%24%28%60%3Cdiv%20id%3D%22html_9069202c767a4bc186689e231b48f8f9%22%20style%3D%22width%3A%20100.0%25%3B%20height%3A%20100.0%25%3B%22%3EHuawei%3A%208.9%25%3C/div%3E%60%29%5B0%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20popup_7832d5f7b275484b8b9bc3b77bb6e2cf.setContent%28html_9069202c767a4bc186689e231b48f8f9%29%3B%0A%20%20%20%20%20%20%20%20%0A%0A%20%20%20%20%20%20%20%20marker_cd46341c81794a1cbc88e145e18f05d6.bindPopup%28popup_7832d5f7b275484b8b9bc3b77bb6e2cf%29%0A%20%20%20%20%20%20%20%20%3B%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%0A%3C/script%3E onload=&quot;this.contentDocument.open();this.contentDocument.write( decodeURIComponent(this.getAttribute(&#39;data-html&#39;)));this.contentDocument.close();&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt;&lt;/iframe&gt;",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/functions/lambda%20functions/error%20handling/2021/07/28/Python-functions.html",
            "relUrl": "/jupyter/functions/lambda%20functions/error%20handling/2021/07/28/Python-functions.html",
            "date": " • Jul 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Decision Tree Regression (CART)",
            "content": "About . Decision trees are one of the best known supervised learning method used for both classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A decision tree can be seen a piecewise constant approximation. . The CART algorithm provides the foundation for important methods like bagged decision trees, random forest and boosted decision trees. The output of a CART is a decision tree where each fork is a split in a predictor variable and each end node contains a prediction for the response variable. Essentially, it sequentially asks a series of if-else questions about individual features in a dataset in order to split it for classification. . Advantages of CARTs . Decision tree model can be used for both classification and regression problems | Outputs of decision trees are easily understood | Data pre-processing step is easier as CARTs don&#39;t require normalisation of data (they may each have different scales) | Not largely impaced by outliers or missing values | Can handle both numerical and categorical variables | Non-parametric method, therefore, makes no assumptions about the underlying distributions of the data | . Disadvantages of CARTs . Overfitting is common in decision trees, as the algorithm continually makes new hypotheses to reduce training set error but incidentally increase test set error. This may be accounted for by setting constraints on model parameters. | Small changes in data tends to cause large differences in tree structure | Can take longer to train the model than other algorithms | . Import packages . The packages we need for the downstream analysis . from matplotlib import pyplot as plt import plotly_express as px import seaborn as sns from sklearn.tree import DecisionTreeRegressor from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.linear_model import LogisticRegression import pandas as pd import numpy as np import os . Exploratory Data Analysis . mpg_df = pd.read_csv(&quot;./Datasets/auto-mpg.csv&quot;) mpg_df.head() . mpg cylinders displacement horsepower weight acceleration model year origin car name . 0 18.0 | 8 | 307.0 | 130 | 3504 | 12.0 | 70 | 1 | chevrolet chevelle malibu | . 1 15.0 | 8 | 350.0 | 165 | 3693 | 11.5 | 70 | 1 | buick skylark 320 | . 2 18.0 | 8 | 318.0 | 150 | 3436 | 11.0 | 70 | 1 | plymouth satellite | . 3 16.0 | 8 | 304.0 | 150 | 3433 | 12.0 | 70 | 1 | amc rebel sst | . 4 17.0 | 8 | 302.0 | 140 | 3449 | 10.5 | 70 | 1 | ford torino | . mpg_df.describe() . mpg cylinders displacement weight acceleration model year origin . count 398.000000 | 398.000000 | 398.000000 | 398.000000 | 398.000000 | 398.000000 | 398.000000 | . mean 23.514573 | 5.454774 | 193.425879 | 2970.424623 | 15.568090 | 76.010050 | 1.572864 | . std 7.815984 | 1.701004 | 104.269838 | 846.841774 | 2.757689 | 3.697627 | 0.802055 | . min 9.000000 | 3.000000 | 68.000000 | 1613.000000 | 8.000000 | 70.000000 | 1.000000 | . 25% 17.500000 | 4.000000 | 104.250000 | 2223.750000 | 13.825000 | 73.000000 | 1.000000 | . 50% 23.000000 | 4.000000 | 148.500000 | 2803.500000 | 15.500000 | 76.000000 | 1.000000 | . 75% 29.000000 | 8.000000 | 262.000000 | 3608.000000 | 17.175000 | 79.000000 | 2.000000 | . max 46.600000 | 8.000000 | 455.000000 | 5140.000000 | 24.800000 | 82.000000 | 3.000000 | . mpg_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 398 entries, 0 to 397 Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 mpg 398 non-null float64 1 cylinders 398 non-null int64 2 displacement 398 non-null float64 3 horsepower 398 non-null object 4 weight 398 non-null int64 5 acceleration 398 non-null float64 6 model year 398 non-null int64 7 origin 398 non-null int64 8 car name 398 non-null object dtypes: float64(3), int64(4), object(2) memory usage: 28.1+ KB . Dataset transformations . data.horsepower = data.horsepower.astype(&#39;float&#39;) . def scale(a): b = (a-a.min())/(a.max()-a.min()) return b . mpg_scale = mpg_df.copy() . mpg_scale [&#39;displacement&#39;] = scale(mpg_scale[&#39;displacement&#39;]) mpg_scale[&#39;horsepower&#39;] = scale(mpg_scale[&#39;horsepower&#39;]) mpg_scale [&#39;acceleration&#39;] = scale(mpg_scale[&#39;acceleration&#39;]) mpg_scale [&#39;weight&#39;] = scale(mpg_scale[&#39;weight&#39;]) mpg_scale[&#39;mpg&#39;] = scale(mpg_scale[&#39;mpg&#39;]) . # Convert object variables to categories for col in [&#39;horsepower&#39;, &#39;car name&#39;]: mpg_df[col] = mpg_df[col].astype(&#39;category&#39;) mpg_df[&#39;Country_code&#39;] = mpg_df.origin.replace([1,2,3],[&#39;USA&#39;,&#39;Europe&#39;,&#39;Japan&#39;]) . **Need some plots on dataset .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/cart/regression/decisiontree/2021/07/22/DecisionTreeRegression.html",
            "relUrl": "/jupyter/cart/regression/decisiontree/2021/07/22/DecisionTreeRegression.html",
            "date": " • Jul 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Decision Tree Classification (CART)",
            "content": "About . Decision trees are one of the best known supervised learning method used for both classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A decision tree can be seen a piecewise constant approximation. . The CART algorithm provides the foundation for important methods like bagged decision trees, random forest and boosted decision trees. The output of a CART is a decision tree where each fork is a split in a predictor variable and each end node contains a prediction for the response variable. Essentially, it sequentially asks a series of if-else questions about individual features in a dataset in order to split it for classification. . Advantages of CARTs . Decision tree model can be used for both classification and regression problems | Outputs of decision trees are easily understood | Data pre-processing step is easier as CARTs don&#39;t require normalisation of data (they may each have different scales) | Not largely impaced by outliers or missing values | Can handle both numerical and categorical variables | Non-parametric method, therefore, makes no assumptions about the underlying distributions of the data | . Disadvantages of CARTs . Overfitting is common in decision trees, as the algorithm continually makes new hypotheses to reduce training set error but incidentally increase test set error. This may be accounted for by setting constraints on model parameters. | Small changes in data tends to cause large differences in tree structure | Can take longer to train the model than other algorithms | . Iris dataset . The famous Iris dataset, first used by Sir R.A. Fisher. The dataset is taken from Fisher&#39;s paper in 1936. . We will be using this classic dataset to build a decision tree classifier to predict the class of the iris plant based on its attributes. . Import packages . The packages we need for the downstream analysis . from matplotlib import pyplot as plt import plotly_express as px import seaborn as sns from sklearn import datasets from sklearn.tree import DecisionTreeClassifier from sklearn import tree from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.linear_model import LogisticRegression import pandas as pd import numpy as np . Exploratory data analysis (EDA) . This is where we investigate the datasets characteristics and observe the data directly to identify underlying issues with missing data and outliers. Given this is a curated example, this won&#39;t be an issue. However, this is always an important step when conducting any statistical analysis. . iris = datasets.load_iris() # Description of the dataset print(iris.DESCR) . .. _iris_dataset: Iris plants dataset -- **Data Set Characteristics:** :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, predictive attributes and the class :Attribute Information: - sepal length in cm - sepal width in cm - petal length in cm - petal width in cm - class: - Iris-Setosa - Iris-Versicolour - Iris-Virginica :Summary Statistics: ============== ==== ==== ======= ===== ==================== Min Max Mean SD Class Correlation ============== ==== ==== ======= ===== ==================== sepal length: 4.3 7.9 5.84 0.83 0.7826 sepal width: 2.0 4.4 3.05 0.43 -0.4194 petal length: 1.0 6.9 3.76 1.76 0.9490 (high!) petal width: 0.1 2.5 1.20 0.76 0.9565 (high!) ============== ==== ==== ======= ===== ==================== :Missing Attribute Values: None :Class Distribution: 33.3% for each of 3 classes. :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken from Fisher&#39;s paper. Note that it&#39;s the same as in R, but not as in the UCI Machine Learning Repository, which has two wrong data points. This is perhaps the best known database to be found in the pattern recognition literature. Fisher&#39;s paper is a classic in the field and is referenced frequently to this day. (See Duda &amp; Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other. .. topic:: References - Fisher, R.A. &#34;The use of multiple measurements in taxonomic problems&#34; Annual Eugenics, 7, Part II, 179-188 (1936); also in &#34;Contributions to Mathematical Statistics&#34; (John Wiley, NY, 1950). - Duda, R.O., &amp; Hart, P.E. (1973) Pattern Classification and Scene Analysis. (Q327.D83) John Wiley &amp; Sons. ISBN 0-471-22361-1. See page 218. - Dasarathy, B.V. (1980) &#34;Nosing Around the Neighborhood: A New System Structure and Classification Rule for Recognition in Partially Exposed Environments&#34;. IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-2, No. 1, 67-71. - Gates, G.W. (1972) &#34;The Reduced Nearest Neighbor Rule&#34;. IEEE Transactions on Information Theory, May 1972, 431-433. - See also: 1988 MLC Proceedings, 54-64. Cheeseman et al&#34;s AUTOCLASS II conceptual clustering system finds 3 classes in the data. - Many, many more ... . iris_df = pd.DataFrame(iris.data, columns = iris.feature_names) iris_df[&#39;target&#39;] = iris.target # Create the dictionary species_dictionary = {0: &#39;Iris-Setosa&#39;, 1: &#39;Iris-Versicolour&#39;, 2: &#39;Iris-Virginica&#39;} # Assign new column values iris_df[&#39;Species&#39;] = iris_df[&#39;target&#39;].map(species_dictionary).astype(str) iris_df.head() . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target Species . 0 5.1 | 3.5 | 1.4 | 0.2 | 0 | Iris-Setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | 0 | Iris-Setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | 0 | Iris-Setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | 0 | Iris-Setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | 0 | Iris-Setosa | . iris_df.describe() . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target . count 150.000000 | 150.000000 | 150.000000 | 150.000000 | 150.000000 | . mean 5.843333 | 3.057333 | 3.758000 | 1.199333 | 1.000000 | . std 0.828066 | 0.435866 | 1.765298 | 0.762238 | 0.819232 | . min 4.300000 | 2.000000 | 1.000000 | 0.100000 | 0.000000 | . 25% 5.100000 | 2.800000 | 1.600000 | 0.300000 | 0.000000 | . 50% 5.800000 | 3.000000 | 4.350000 | 1.300000 | 1.000000 | . 75% 6.400000 | 3.300000 | 5.100000 | 1.800000 | 2.000000 | . max 7.900000 | 4.400000 | 6.900000 | 2.500000 | 2.000000 | . iris_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 150 entries, 0 to 149 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 sepal length (cm) 150 non-null float64 1 sepal width (cm) 150 non-null float64 2 petal length (cm) 150 non-null float64 3 petal width (cm) 150 non-null float64 4 target 150 non-null int32 5 Species 150 non-null object dtypes: float64(4), int32(1), object(1) memory usage: 6.6+ KB . plt.figure(figsize=(8, 8)) ax = sns.pairplot(iris_df, hue=&#39;target&#39;) plt.show() . &lt;Figure size 576x576 with 0 Axes&gt; . EDA outcomes . There aren&#39;t any missing values, all columns have 150 values. Therefore it&#39;s not necessary to account for missing values. | All data types are numerical (float64/int32). This is important as Scikit-Learn models do not accept categorical data. These must be converted into dummy variables represented as 0s and 1s. | Data appears to cluster by species meaning that classification will probably work well to define each category. | . Classification and regression tree (CART) . Two most popular backbones for decision tree decisions are the Gini index and Information entropy . As mentioned above, a tree is composed of nodes. These nodes are chosen by looking for the optimal split of the features. The split decision is made by measuring the quality of the split. Both the Gini index and Information entropy are measures of this quality of the split. . Before this, we must set-up our training and test datasets using the train_test_split module from SciKit-learn&#39;s model_selection library. The purpose of this is to ensure the model is not trained on all available data, allowing us to test how it performs on unseen data. If we used all the data to train the model, we may end up overfitting the model causing it to perform badly on unseen data. . X = iris.data y = iris.target # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state=1) . Gini index . It is calculated using the following formula: . GiniIndex $ = 1 - sum limits _{j} p^2_{j} $ . Where $p_{j}$ is the probability of class j. . The gini impurity measures the frequency at which any element of the dataset will be mislabelled when it is randomly sampled. The minimum value of the Gini Index is 0. This happens when the node is pure, this means that all the contained elements in the node are of one unique class. Therefore, this node will not be split again. Thus, the optimum split is chosen by the features with less Gini Index. Moreover, it gets the maximum value when the probability of the two classes are the same. . dt_gini = DecisionTreeClassifier(max_depth= 3, criterion= &#39;gini&#39;, random_state= 1234) # Fit the decision tree to the data dt_gini.fit(X_train, y_train) # Predict test set labels y_pred = dt_gini.predict(X_test) # Calculate accuracy score acc_dt_gini = accuracy_score(y_test, y_pred) print(f&quot;Accuracy score of decision tree: {acc_dt_gini}&quot;) . Accuracy score of decision tree: 0.9666666666666667 . fig = plt.figure(figsize=(25,20)) tree_plot = tree.plot_tree(dt_gini, feature_names=iris.feature_names, class_names=iris.target_names, filled=True) . Information entropy . It is calculated using the following formula: . Entropy $ = sum limits _{j} p_{j}.log_{2}.p_{j} $ . Where $p_{j}$ is the probability of class j. . Entropy is a measure of information that indicates the disorder of the features with the target. Similar to the Gini Index, the optimum split is chosen by the feature with less entropy. It gets its maximum value when the probability of the two classes is the same and a node is pure when the entropy has its minimum value, which is 0. . dt_entropy = DecisionTreeClassifier(max_depth= 3, criterion= &#39;entropy&#39;, random_state= 1234) # Fit the decision tree to the data dt_entropy.fit(X_train, y_train) # Predict test set labels y_pred = dt_entropy.predict(X_test) # Set new var with accuracy acc_dt_entropy = accuracy_score(y_test, y_pred) print(f&quot;Accuracy score of decision tree: {acc_dt_entropy}&quot;) . Accuracy score of decision tree: 0.9666666666666667 . fig = plt.figure(figsize=(25,20)) tree_plot = tree.plot_tree(dt_entropy, feature_names=iris.feature_names, class_names=iris.target_names, filled=True) .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/cart/classification/decisiontree/2021/07/22/DecisionTreeClassification.html",
            "relUrl": "/jupyter/cart/classification/decisiontree/2021/07/22/DecisionTreeClassification.html",
            "date": " • Jul 22, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "How to turn a Raspberry Pi into a Plex home media server",
            "content": "About . This project involves turning a Raspberry Pi 4 into a Plex home media server, where all media (e.g. movies, tv shows, photos etc) are stored locally and may be delivered within the network. . Plex is a client-server setup where the client directly streams data from the Plex media server. This setup means you can have all your movies, music, and photos located on the one device, the server. In this case, we will be using the Raspberry Pi. . You can then have multiple clients connect to the same server. It is great as you don’t need to have multiple copies of the same media across several devices. . An extension to this project involves setting up the server with VPN (virutal private network) to allow for remote access. . Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Ethernet cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Install Raspberry Pi operating system . Flash a microSD card with a Raspberry Pi operating system using the Raspberry Pi Imager. I used the default raspbian OS as shown below. Be careful about which microSD card you use as this flashing process will wipe the drive. It may take a while for it to fully install the OS. Once this is done, eject the microSD card and insert into the Raspberry Pi. . For more in-depth notes on installing the OS, follow this guide. . from IPython import display display.Image(&quot;./Images/RaspberryPiImager.png&quot;) . Step 3: Preparing Pi for Plex . Before installing the Plex Media Server software to the Raspberry Pi, we need first to ensure our operating system is entirely up to date by running the following two commands in the terminal. . sudo apt-get update sudo apt-get upgrade . Step 4: enable HTTPS transfer during downloads . To install the Plex packages to the Raspberry Pi, we will need to add the official Plex package repository. The apt-transport-https package must be installed so that Raspbian’s package manager can also access these HTTPS sources. This package allows the “apt” package manager to retrieve packages over the “https” protocol that the Plex repository uses. . Install the package by running the command below. . sudo apt-get install apt-transport-https . display.Image(&quot;./Images/RaspberryPi_HTTPS.png&quot;) . Step 5: Add Plex repositories to the &quot;apt&quot; package managers key list . This key is used to ensure the files that you are downloading are in fact from that repository and signed by that key. . Run the following command to download and add the key to the package manager. . curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add - . display.Image(&quot;./Images/RaspberryPi_APT.png&quot;) . Step 6: Add official Plex repository . With the Plex GPG key now added, we can finally add the official plex repository to the sources list by running the following command. . echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list . We&#39;ll need to run the update command once more to refresh our libraries as we&#39;ve added another repository to our sources. . sudo apt-get update . display.Image(&quot;./Images/RaspberryPi_GPGKey.png&quot;) . Step 7: Installing Plex to your Raspberry Pi . Now that we have set up our Raspberry Pi so that it can read from Plex’s official package repositories we can go ahead and finally install the Plex Media server package to the Pi. . To install the “plexmediaserver” package, run the command below. . sudo apt install plexmediaserver . display.Image(&quot;./Images/RaspberryPi_Plex.png&quot;) . Step 8: Setting a static IP addess for your Plex server . Now that we have installed Plex to our Raspberry Pi we should make sure that we are using a static IP address. . There are two reasons to use a static IP. One is that the IP will be easier to remember. Second is that it will make sure your Plex server can always be found at the same address. . To get your current IP address, enter the following command. . hostname -I . display.Image(&quot;./Images/RaspberryPi_IP.png&quot;) . Now open up the cmdline.txt file. . sudo nano /boot/cmdline.txt . At the bottom of this file, add the following line: (Replacing “YOUR IP” with the IP you got from using hostname -I) . ip=YOUR IP . Exit by pressing CTRL + X and then Y to save . Now simply restart the Pi by running the following command: . sudo reboot .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/plex/raspberrypi/2021/07/21/Turning-Raspberry-Pi-into-a-Plex-media-server.html",
            "relUrl": "/jupyter/plex/raspberrypi/2021/07/21/Turning-Raspberry-Pi-into-a-Plex-media-server.html",
            "date": " • Jul 21, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "How to turn a Raspberry Pi into a NAS for security footage",
            "content": "About . Ever since our flat had a number of packages get stolen from our front porch last year, I&#39;ve set-up numerous security cameras (Xiaomi Mi Home Security Camera 360o 1080P) around the property to continuously record and identify when people/animals enter the frame. While this function is useful, I&#39;ve found the native computer vision algorithm for recognition isn&#39;t that great. Therefore, a separate project entails the process of developing a security camera unit where footage is passed to a Raspberry Pi 4 Model B with a neural compute stick (Movidius 2) for enhanced image recognition via tiny-YOLO. . This project involves turning a Raspberry Pi 4 into a Network Associated Storage (NAS) device, where security footage is automatically passed to. This ensures data is reliably stored and easily accessible to anyone on the local network. In addition, this NAS serves as a backup should any security camera fail, as they typically write to an onboard MicroSD card. . Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Install Raspberry Pi operating system . Flash a microSD card with a Raspberry Pi operating system using the Raspberry Pi Imager. I used the default raspbian OS as shown below. Be careful about which microSD card you use as this flashing process will wipe the drive. It may take a while for it to fully install the OS. Once this is done, eject the microSD card and insert into the Raspberry Pi. . For more in-depth notes on installing the OS, follow this guide. . from IPython import display display.Image(&quot;./Images/RaspberryPiImager.png&quot;) . display.Image(&quot;./Images/RaspberryPiImager2.png&quot;) . Step 3: Access and update your system . Connect the keyboard, mouse, computer monitor (via microHDMI - HDMI cable) and power supply to the Raspberry Pi. The set-up process should occur automatically, however once you get to the home screen you&#39;ll be asked to confirm several things (language, WiFi etc). Following this, you&#39;ll see the default home screen as shown below. . display.Image(&quot;./Images/RaspberryHomeScreen.png&quot;) . Update your system . Open command line and run the following two lines to update the package list and all packages. . sudo apt-get update . sudo apt-get upgrade . display.Image(&quot;./Images/RaspberryPi_Update.png&quot;) . Step 4: Install Samba on your Raspberry Pi . After your Raspbian OS is up to date, we&#39;ll need to install the Samba software on the Raspberry Pi. Use the following command: . sudo apt-get install samba samba-common-bin . display.Image(&quot;./Images/RaspberryPi_Samba.png&quot;) . Step 5: Create a Shared Folder . Now we&#39;ll need to create a place where you can store and share all our data. This folder can be located anywhere, even on a mounted external hard drive. For this tutorial we&#39;ll be creating a public and private folder accessible on the NAS. Use the following command: . mkdir /home/pi/shared . display.Image(&quot;./Images/RaspberryPi_SharedFolder.png&quot;) . Step 6: Sharing folder using Samba . Now we&#39;ll be sharing the above folder we created using Samba. TO do this we&#39;ll need to modify the Samba configuration file. Use the following command to access the file: . sudo nano /etc/samba/smb.conf . The screen below should pop-up once this command has been entered. Within this file add the following to the bottom: . [Raspi-NAS] path = /home/pi/shared writeable=Yes create mask=0777 directory mask=0777 public=no . [Sharedfolder]: This defines the address and other configurations of the shared folder. For example, the shared folder will be created at the following address: raspberrypi Sharedfolder. You can rename it to whatever you like as well. . path: This option contains the address of the directory that is going to be shared. If you wish to store the shared folder on an external drive, just change to path option here to point it towards your external drive. . writeable: If this option is set to yes, the folder will be writable. . create mask &amp; directory mask: This option defines the permissions for the folder and the files it contains. By setting it to 0777, it will allow users to read, write and execute. . public: This option is used to give permission to either give any user access to the folder or restricted access. With the option set to “no”, the Raspberry Pi needs a valid user to grant access to shared folders. . display.Image(&quot;./Images/RaspberryPi_Samba2.png&quot;) . Save the changes . Now we&#39;ve added the changes, we can save them by pressing CTRL + X then Y and hit ENTER . Step 7: Make a User for Samba on the Raspberry Pi . Next, we will make a user for our Samba server on the Raspberry Pi in order for us to make a connection to the shared network drive. We will run a command to create a Samba user called “Pi”: . sudo smbpasswd -a pi . After running this command, you will be prompted to set a password that is up to you. With this user “Pi” you can access and manage the Samba folder from Windows, macOS, or other Raspberry Pi devices If you wish to create additional users, key in the following commands: . sudo adduser username sudo smbpasswd -a username . Replace “username” with your choice of username. . Step 8: Connect to Samba server on Windows . Go to Map Network Drive . To access files and folders on Windows system, we have to put the address of the shared media. You can do this by going My Computer and click Map Network Drive as shown below: . display.Image(&quot;./Images/SambaServer_Windows.png&quot;) . Connect to the Network Folder . After clicking on Map network drive, this dialog will be shown. You will have to fill in the address which you previously defined in step 6. For this tutorial we&#39;ve chosen Raspi-NAS If the connection fails, switch out “raspberrypi” with your Raspberry Pi local IP address by entering this command in terminal (hostname -I) Once you are done, click Finish to finalize the connection. . display.Image(&quot;./Images/SambaServer_Windows2.png&quot;) .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/nas/raspberrypi/2021/07/21/Turning-Raspberry-Pi-into-a-NAS.html",
            "relUrl": "/jupyter/nas/raspberrypi/2021/07/21/Turning-Raspberry-Pi-into-a-NAS.html",
            "date": " • Jul 21, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "VNC (Virtual Network Computing)",
            "content": "About . VNC is a graphical desktop sharin system that allows you to remotely control the desktop interface of one computer (running VNC Server) from another computer or mobile device (running VNC Viewer). VNC Viewer transmits the keyboard and either mouse or touch events to VNC Server, and receives updates to the screen in return. . You will see the desktop of the Raspberry Pi inside a window on your computer or mobile device. You&#39;ll be able to control it as though you were working on the Raspberry Pi itself. . Step 1: Installing VNC . VNC is actually already installed on the full Raspberry Pi OS image, and can be installed via Recommended Software from the Preferences menu on other versions. . Otherwise, using command line you can run the following commands: . sudo apt update sudo apt install realvnc-vnc-server realvnc-vnc-viewer . from IPython import display display.Image(&quot;./Images/RaspberryPi_VNCInstall.png&quot;) . Step 2: Enabling the VNC server . You can do this graphically or at the command line. . Enabling VNC Server graphically On your Raspberry Pi, boot into the graphical desktop. . Select Menu &gt; Preferences &gt; Raspberry Pi Configuration &gt; Interfaces. . Ensure VNC is Enabled. . Enabling VNC Server at the command line You can enable VNC Server at the command line using raspi-config: . sudo raspi-config . Now, enable VNC Server by doing the following: . Navigate to Interfacing Options. . Scroll down and select VNC &gt; Yes. . Step 3: Connecting Raspberry Pi with VNC Viewer . Establishing a direct connection Direct connections are quick and simple providing you&#39;re joined to the same private local network as your Raspberry Pi. For example, this might be a wired or wireless network at home, at school, or in the office. . On your Raspberry Pi (using a terminal window or via SSH) use these instructions or run ifconfig to discover your private IP address. . On the device you&#39;ll use to take control, download VNC Viewer. For best results, use the compatible app from RealVNC. . Enter your Raspberry Pi&#39;s private IP address into VNC Viewer: . from IPython import display display.Image(&quot;./Images/RaspberryPi_VNC.png&quot;) .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/vnc/raspberrypi/2021/07/20/Setting-up-VNC-on-Raspberry-Pi-for-remote-access.html",
            "relUrl": "/jupyter/vnc/raspberrypi/2021/07/20/Setting-up-VNC-on-Raspberry-Pi-for-remote-access.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "How to mount an external hard drive to Raspberry Pi",
            "content": "About . Mounting drives is an important skill to have when it comes to working hard drives and file structures in Linux. Once you have a general understanding, it becomes a pretty easy task. . Step 1: Gather all required components . We&#39;ll need several components to complete this project, some of which you may already have lying around: . Raspberry Pi 4 | A power supply | microSD card | External HDD | HMDI - microHDMI cable | Any keyboard, mouse and HMDI compatible computer monitor | . Step 2: Identify disks for mounting . We first need to find out the filesystem name for the drive we want to mount to our Raspberry Pi . We&#39;ll be using the &quot;df&quot; command as below . df -h . The following output is expected . from IPython import display display.Image(&quot;./Images/RaspberryPi_Mount1.png&quot;) . This results in a list of all connected storage devices, the name of their filesystem and where they are currently mounted on. We&#39;ll use this to identify the drive we want to mount. . In this tutorial, we&#39;ll be mounting Raspi_NAS drive to our Raspberry Pi. Note: Most external drives will be referenced under the /dev/sd** filesystem name. . We see that this entry matches what we&#39;re after: . /dev/sda1 9.1T 1.6T 7.6T 18% /mnt/Raspi_NAS . Step 3: Retrieve Disk UUID and Type . We&#39;ll need to take the filesystem name we retrieved in the previous section to find both the UUID (Universal Unique Identifier) and the type of drive. . Run the following command to retrieve this information specific to the drive entry we identified earlier: . sudo blkid /dev/sda1 . display.Image(&quot;./Images/RaspberryPi_Mount2.png&quot;) . From this we can see that both UUID and type are returned. Please make a note on both the UUID and type. . Step 4: Additional drivers . Depending on the type of your filesystem, you may need to install additional drivers. . If you are using a drive that has a type of ntfs or exFAT, you will need to follow the appropriate steps below. Otherwise, you can continue to the next section. . NFTS . sudo apt install ntfs-3g . exFAT . sudo apt install exfat-fuse sudo apt install exfat-utils . Step 5: Mount the drive to Raspberry Pi . Now that we&#39;ve got the UUID, type and installed the additional drivers (if needed), we can now mount the drive. . Make new directory to mount our drive to . We can do this by running the following command. You can name the folder we are mounting anything, but for this tutorial, we will be using the name Raspi_NAS. . sudo mkdir -p /mnt/Raspi_NAS . Giving permissions to the new folder . We need appropriate permissions set-up to access the drive mounted in this new folder . sudo chown -R pi:pi /mnt/Raspi_NAS . Modify the fstab file . This file controls how drives are mounted to your Raspberry Pi . sudo nano /etc/fstab . This should open up a file, where you&#39;ll need to add the following to the bottom, replacing [UUID] and [TYPE] with their required values. . UUID=[UUID] /mnt/usb1 [TYPE] defaults,auto,users,rw,nofail,noatime 0 0 . Once done, save the file by pressing CTRL + X, followed by Y and then the ENTER key. . display.Image(&quot;./Images/RaspberryPi_Mount3.png&quot;) . Step 5: Checking the mounted drive . We&#39;ll need to unmount and mount the drive to ensure the changes made to the fstab file have taken. (Replace /dev/sda1 with the filesystem name you found earlier). . Unmount the drive . sudo umount /dev/sda1 . Mount the drive again . sudo mount -a . Making sure the drives are restored after Pi has been restarted . sudo reboot . The drives should automatically be mounted after the Raspberry Pi has finished rebooting. .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/hdd/raspberrypi/2021/07/20/Mounting-a-drive-in-Raspberry-Pi.html",
            "relUrl": "/jupyter/hdd/raspberrypi/2021/07/20/Mounting-a-drive-in-Raspberry-Pi.html",
            "date": " • Jul 20, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tokyosurfer.github.io/DataWorld/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tokyosurfer.github.io/DataWorld/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tokyosurfer.github.io/DataWorld/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tokyosurfer.github.io/DataWorld/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}